// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package pl.edu.agh.wiet.sr.banking.generated.services;

public class BalanceResponse implements java.lang.Cloneable,
                                        java.io.Serializable
{
    public pl.edu.agh.wiet.sr.banking.generated.model.Currency currency;

    public double balance;

    public BalanceResponse()
    {
        this.currency = pl.edu.agh.wiet.sr.banking.generated.model.Currency.USD;
    }

    public BalanceResponse(pl.edu.agh.wiet.sr.banking.generated.model.Currency currency, double balance)
    {
        this.currency = currency;
        this.balance = balance;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        BalanceResponse r = null;
        if(rhs instanceof BalanceResponse)
        {
            r = (BalanceResponse)rhs;
        }

        if(r != null)
        {
            if(this.currency != r.currency)
            {
                if(this.currency == null || r.currency == null || !this.currency.equals(r.currency))
                {
                    return false;
                }
            }
            if(this.balance != r.balance)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::pl::edu::agh::wiet::sr::banking::generated::services::BalanceResponse");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, currency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, balance);
        return h_;
    }

    public BalanceResponse clone()
    {
        BalanceResponse c = null;
        try
        {
            c = (BalanceResponse)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        pl.edu.agh.wiet.sr.banking.generated.model.Currency.ice_write(ostr, this.currency);
        ostr.writeDouble(this.balance);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.currency = pl.edu.agh.wiet.sr.banking.generated.model.Currency.ice_read(istr);
        this.balance = istr.readDouble();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, BalanceResponse v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public BalanceResponse ice_read(com.zeroc.Ice.InputStream istr)
    {
        BalanceResponse v = new BalanceResponse();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<BalanceResponse> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, BalanceResponse v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<BalanceResponse> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(BalanceResponse.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final BalanceResponse _nullMarshalValue = new BalanceResponse();

    public static final long serialVersionUID = 780091584L;
}
